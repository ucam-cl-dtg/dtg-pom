<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>uk.ac.cam.cl.dtg</groupId>
		<artifactId>parent</artifactId>
		<version>1.0.2</version>
		<!-- Disable searching the filesystem for the parent because it doesn't 
			match our repository layout -->
		<relativePath>../parent/</relativePath>
	</parent>
	<artifactId>android</artifactId>
	<name>DTG Android Parent Pom</name>
	<version>1.0.3-SNAPSHOT</version>
	<packaging>pom</packaging>
	<dependencies>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-android</artifactId>
			<version>1.7.7</version>
			<scope>runtime</scope>
		</dependency>
	</dependencies>

	<!--  TODO -->
	<!--  no version ranges -->
	<!--  auto manifest versioning -->
	<!--  android build numbering -->
	<!--  zipalign -->
	<!--  proguard -->
	<!--  general release strategy -->

	<!--  ************** USAGE INSTRUCTIONS *************** -->

	<!-- How to use: -->
	<!-- 1) create a new Android project -->
	<!-- 2) create a pom.xml file that uses this one as it's parent -->
	<!-- 3) create extra directories src-debug, src-release and config-debug -->
	<!-- 4) add config-debug/local.properties to gitignore -->
	<!-- 5) add variables to settings.xml to define the default testing behaviour 
		of your app and the release information -->
	<!-- 6) Don't put any key material or any service urls in the source tree 
		- these should be in settings.xml -->
	<!-- 7) Document at the top of your POM which variables need to be in settings.xml 
		and what they mean -->
	<!-- 8) Import these variables into your code by using variable substitution 
		in src-release and by using compilesettingsloader.Loader in src-debug -->

	<!-- Settings.xml variables required by this pom-->
	<!--  android.debug.keystore = location of the keystore containing the android debug key -->
	<!--  android.debug.keyalias = should be set to androiddebugkey if you want eclipse to play nice -->
	<!--  android.debug.storepass = should be set to android if you want eclipse to play nice -->
	
	<!-- Settings.xml variables which can be used in your program -->
	<!--  android.debug.mapskey = API key to use if building with the debug key -->

	<!-- Environment variables which should be provided by dependent poms -->
	<!--  android.release.keystore = location of the keystore containing the signing key -->
	<!--  android.release.keyalias = alias of the release signing key -->
	
	<!-- Invocation-time variables (e.g. command line) -->
	<!--  storepass = the keystore password for release signing -->


	<!-- Example command lines: -->

	<!-- Debug:  mvn clean package android:deploy android:run -->

	<!-- Release: mvn -P release -Dstorepass=XXXX clean install -->

	<!-- The binary you want is ${project.artifactId}-aligned.apk -->


	<!--  ************** NOTES *************** -->

	<!-- The general strategy here is that one should be able to build and run 
		from eclipse and from command-line. The eclipse build only generates debug 
		builds whereas command-line can do either. The Android plugin in eclipse 
		is the limiting factor since it offers little flexibility about where things 
		go and so we adopt an Android project layout rather than a Maven project 
		layout. -->

	<!-- Profiles: we support either a debug build or a release build. Debug 
		builds might contain internal information and are not for public consumption. 
		Builds from eclipse will always be debug builds. Command-line builds can 
		be either. -->

	<!-- Build environment: this is defined as the contents of settings.xml 
		- this file is copied into the apk for debug builds so that settings can 
		be loaded from it. On release builds it is not copied - instead the relevant 
		values are inserted by compile time substitution -->

	<!-- Interaction with eclipse: the ideal is that you can choose Maven->Update 
		build configuration in Eclipse and get a working build. I've experimented 
		for a while with a more simple setup here and manually fixing the eclipse 
		setup when it gets things wrong but this is deeply error prone. Also eclipse 
		seems to decide that it needs an update from time to time and there is no 
		way to clear the build error this causes without updating the configuration 
		and then reapplying your manual changes -->

	<!-- Compile time settings: in debug mode these are derived at runtime, 
		in release mode these are textually inserted into the program. Debug-time 
		constants should be put in classes in src-debug and resolved using the compilesettingsloader 
		library provided. Release-time constants should be put in classes in src-release 
		as literals of the form ${variable} -->

	<!-- Debug-time settings: these are set at runtime so that the eclipse build 
		can work. To make this work the build system packages up config-debug/local.properties 
		and ~/.m2/settings.xml into the APK, the Loader class from compilesettingsloader 
		then resolves the required values at runtime. You should set up your project 
		so that an unmodified checkout will get sufficient information from settings.xml 
		to run in test mode - if you then need to make local changes to test specific 
		cases etc. then you put them in local.properties (don't commit them back) -->

	<!-- Why not use substitution on debug builds too?: This doesn't work with 
		IDEs. You end up with a source tree of syntactically invalid code which won't 
		compile. Current status is that eclipse will delegate the filtering to maven 
		- this is worse because you end up with both the source and destination automatically 
		added to your build path when you do update project dependencies so you either 
		have build errors or duplicate classes AND you have to remember to edit the 
		correct version of the file or it just gets overwritten. -->

	<!-- Why is local.properties hidden in config-debug/?: We have to hack around 
		eclipse not handling resources properly from maven - the upshot of this is 
		that debug mode we add config-debug/* as a resource and also to the build 
		path. The maven command line builds interpret the resource part correctly 
		and copy the contents into the APK. Eclipse doesn't get this and so instead 
		by adding config-debug to the build path the resources get copied in automatically 
		instead. In release mode the config-debug directory is ignored. We can't 
		keep local.properties in the project root directory because you can't set 
		include/excludes on a src directory setting and so you can't add the project 
		root as a src directory -->

	<!-- Signing keys: all debug builds are built with the same debug.key for 
		all apps. Release builds use a specific key for each app - specify this by 
		setting the property release.keystore in your pom. All our keystores are 
		kept in a special repository (obviously not for public release) - do not 
		put key material in a source code repository. -->

	<!-- Maps API keys: these are inserted by compile time settings. There is 
		a generic API key to use if testing an app because its signed with our common 
		debug key - you access this by using the variable android.debug.mapskey in 
		your code which is defined in settings.xml. Release builds need an API key 
		matching their signing key - specify this by setting the property for substitution 
		in settings.xml. This means that you need to create your maps programmatically 
		rather than in XML so you can use the substituted variables. -->

	<!-- Why not use substitution on the XML too?: This doesn't work because 
		you need to be able to launch from eclipse which is not applying any filtering. 
		Putting the literal API debug key in the XML and then filtering it out on 
		release is not a good idea either because you don't want to leak your API 
		key to the rest of the world - the whole point of the API key system is to 
		associate usage with a particular developer (or closed set of developers). 
		Note: at this time (Jun-2012) the eclipse ADT plugin does not support resource 
		overlay directories and so its not possible to somehow import some extra 
		xml from elsewhere and overlay it to get around this problem either -->

	<build>
		<finalName>${project.artifactId}</finalName>
		<directory>${basedir}/bin</directory>
		<sourceDirectory>${basedir}/src</sourceDirectory>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jarsigner-plugin</artifactId>
				<version>1.2</version>
				<executions>
					<execution>
						<id>signing</id>
						<goals>
							<goal>sign</goal>
						</goals>
						<phase>package</phase>
						<configuration>
							<includes>
								<include>${project.build.directory}/${project.artifactId}.apk</include>
							</includes>
							<arguments>
								<argument>-sigalg</argument>
								<argument>MD5withRSA</argument>
								<argument>-digestalg</argument>
								<argument>SHA1</argument>
							</arguments>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>com.jayway.maven.plugins.android.generation2</groupId>
				<artifactId>android-maven-plugin</artifactId>
				<version>3.8.2</version>
				<configuration>
					<file>${project.build.directory}/${project.artifactId}-aligned.apk</file>
					<sdk>
						<platform>4</platform>
					</sdk>
					<undeployBeforeDeploy>true</undeployBeforeDeploy>
					<sign>
						<debug>false</debug>
					</sign>
				</configuration>
				<extensions>true</extensions>
				<executions>
					<execution>
						<id>alignApk</id>
						<phase>package</phase>
						<goals>
							<goal>zipalign</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<profile>
			<id>debug</id>
			<activation>
				<property>
					<name>environment</name>
					<value>!release</value>
				</property>
			</activation>
			<dependencies>
				<dependency>
					<groupId>uk.ac.cam.cl.dtg</groupId>
					<artifactId>compilesettingsloader</artifactId>
					<version>1.1.3</version>
				</dependency>
			</dependencies>
			<build>
				<resources>
					<resource>
						<directory>${basedir}/config-debug</directory>
					</resource>
				</resources>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>build-helper-maven-plugin</artifactId>
						<version>1.7</version>
						<executions>
							<execution>
								<id>add-source</id>
								<phase>generate-sources</phase>
								<goals>
									<goal>add-source</goal>
								</goals>
								<configuration>
									<sources>
										<source>${basedir}/config-debug</source>
										<source>${basedir}/src-debug</source>
									</sources>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<artifactId>maven-resources-plugin</artifactId>
						<version>2.5</version>
						<executions>
							<execution>
								<id>copy-resources</id>
								<phase>validate</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<outputDirectory>${project.build.directory}/classes</outputDirectory>
									<resources>
										<resource>
											<directory>${user.home}/.m2</directory>
											<includes>
												<include>settings.xml</include>
											</includes>
										</resource>
									</resources>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-jarsigner-plugin</artifactId>
						<configuration>
							<keystore>${android.debug.keystore}</keystore>
							<alias>${android.debug.keyalias}</alias>
							<storepass>${android.debug.storepass}</storepass>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>release</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>build-helper-maven-plugin</artifactId>
						<version>1.7</version>
						<executions>
							<execution>
								<id>add-source</id>
								<phase>generate-sources</phase>
								<goals>
									<goal>add-source</goal>
								</goals>
								<configuration>
									<sources>
										<source>${basedir}/src-release</source>
									</sources>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>com.jayway.maven.plugins.android.generation2</groupId>
						<artifactId>android-maven-plugin</artifactId>
						<version>3.8.2</version>
						<configuration>
							<manifest>
								<debuggable>false</debuggable>
								<versionCodeAutoIncrement>false</versionCodeAutoIncrement>
							</manifest>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-jarsigner-plugin</artifactId>
						<configuration>
							<keystore>${android.release.keystore}</keystore>
							<alias>${android.release.keyalias}</alias>
							<storepass>${storepass}</storepass>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
